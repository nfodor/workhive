#!/bin/bash

# Enable debug output to see what's happening
#set -x 

# Enable strict mode and verbose error handling at the top of the script
set -euo pipefail
IFS=$'\n\t'

# Trap errors and print detailed information
trap 'echo "[ERROR] Command failed at line $LINENO: $BASH_COMMAND" >&2' ERR

# Check for required commands at startup
for cmd in nmcli iwconfig ethtool ip ping grep awk qrencode; do
  if ! command -v "$cmd" >/dev/null 2>&1; then
    if [ "$cmd" == "qrencode" ]; then
      echo "[WARNING] Command '$cmd' not found. QR code generation will be skipped. Install with 'sudo apt install qrencode'." >&2
    else
      echo "[FATAL] Required command '$cmd' not found. Please install it before running this script." >&2
      exit 1
    fi
  fi
done

HOTSPOT_NAME="WORK-HIVE_HOTSPOT"
HOTSPOT_IP="192.168.100.1/24"
WG_INTERFACE="wg0"
VPN_DNS="1.1.1.1"
WG_PUBLIC_IP="157.230.208.238"  # Replace with actual WireGuard server public IP
DNSMASQ_CONF="/etc/NetworkManager/dnsmasq.d/custom-dns.conf"
DHCP_CONF="/etc/NetworkManager/dnsmasq.d/dhcp-options.conf"
CONFIG_DIR="$HOME/.wifi_configs"

# Derived Hotspot IP configurations
HOTSPOT_GATEWAY_IP=$(echo "$HOTSPOT_IP" | cut -d'/' -f1)
_HOTSPOT_CIDR_SUFFIX=$(echo "$HOTSPOT_IP" | cut -d'/' -f2)
_HOTSPOT_SUBNET_PREFIX=$(echo "$HOTSPOT_GATEWAY_IP" | cut -d'.' -f1-3)
HOTSPOT_SUBNET="${_HOTSPOT_SUBNET_PREFIX}.0/${_HOTSPOT_CIDR_SUFFIX}"

print_help() {
  # ...existing content...
}

# Add missing functions
handle_edit() {
  local config_keyword=$1
  
  case "$config_keyword" in
    allowed_devices)
      if [ ! -f "$DHCP_CONF" ]; then
        mkdir -p "$(dirname "$DHCP_CONF")"
        touch "$DHCP_CONF"
      fi
      
      if [ -n "${EDITOR:-}" ]; then
        sudo "$EDITOR" "$DHCP_CONF"
      elif [ -n "${VISUAL:-}" ]; then
        sudo "$VISUAL" "$DHCP_CONF"
      elif command -v nano >/dev/null 2>&1; then
        sudo nano "$DHCP_CONF"
      elif command -v vim >/dev/null 2>&1; then
        sudo vim "$DHCP_CONF"
      else
        echo "No suitable editor found. Please install nano or vim."
        return 1
      fi
      
      echo "Restarting NetworkManager to apply changes..."
      sudo systemctl restart NetworkManager
      apply_dns_bypass_for_clients
      ;;
    *)
      echo "Error: Unknown config keyword: $config_keyword"
      echo "Available keywords:"
      echo "  - allowed_devices: Edit device authorization list"
      return 1
      ;;
  esac
}

deduplicate_network_profiles() {
  echo "Checking for duplicate Wi-Fi profiles..."
  
  # Get list of all WiFi connection profiles
  local -A ssid_profiles
  local ssid profile_name

  while read -r line; do
    profile_name=$(echo "$line" | cut -d: -f1)
    ssid=$(nmcli -g 802-11-wireless.ssid connection show "$profile_name" 2>/dev/null)
    
    if [ -n "$ssid" ]; then
      if [ -n "${ssid_profiles[$ssid]:-}" ]; then
        echo "Found duplicate profile for SSID '$ssid':"
        echo "  1) ${ssid_profiles[$ssid]}"
        echo "  2) $profile_name"
        read -p "Keep which profile? [1/2/n(one)/s(kip)]: " choice
        
        case "$choice" in
          1)
            echo "Deleting profile: $profile_name"
            sudo nmcli connection delete "$profile_name"
            ;;
          2)
            echo "Deleting profile: ${ssid_profiles[$ssid]}"
            sudo nmcli connection delete "${ssid_profiles[$ssid]}"
            ssid_profiles[$ssid]="$profile_name"
            ;;
          n|N)
            echo "Deleting both profiles"
            sudo nmcli connection delete "${ssid_profiles[$ssid]}"
            sudo nmcli connection delete "$profile_name"
            unset "ssid_profiles[$ssid]"
            ;;
          s|S)
            echo "Skipping this duplicate"
            ;;
          *)
            echo "Invalid choice, skipping"
            ;;
        esac
      else
        ssid_profiles[$ssid]="$profile_name"
      fi
    fi
  done < <(nmcli -t -f NAME connection | grep -v "$HOTSPOT_NAME")
  
  echo "Duplicate profile cleanup completed."
}

deduplicate_saved_configs() {
  echo "Checking for duplicate saved configurations..."
  
  # Create arrays to store configs by SSID and mode
  declare -A configs
  
  # Get all config files
  shopt -s nullglob
  local config_files=("$CONFIG_DIR"/*.conf)
  
  if [ ${#config_files[@]} -eq 0 ]; then
    echo "No saved configurations found."
    return 0
  fi
  
  # First pass: group configs by SSID and mode
  for config_file in "${config_files[@]}"; do
    local ssid=$(grep -m 1 -oP 'SSID="\K[^"]+' "$config_file" | tr -d '\n')
    local mode=$(grep -m 1 -oP 'MODE="\K[^"]+' "$config_file" | tr -d '\n')
    local config_id=$(basename "$config_file" .conf)
    
    # Create a unique key for each SSID+mode combination
    local key="${ssid}:${mode}"
    
    if [ -n "${configs[$key]:-}" ]; then
      configs[$key]="${configs[$key]}|$config_file"
    else
      configs[$key]="$config_file"
    fi
  done
  
  # Second pass: check for duplicates
  for key in "${!configs[@]}"; do
    IFS='|' read -ra duplicate_files <<< "${configs[$key]}"
    if [ ${#duplicate_files[@]} -gt 1 ]; then
      local ssid mode
      IFS=':' read -r ssid mode <<< "$key"
      
      echo "Found duplicate configurations for SSID '$ssid' (${mode} mode):"
      local i=1
      for file in "${duplicate_files[@]}"; do
        local created_date=$(grep -m 1 -oP 'CREATED_DATE="\K[^"]+' "$file" | tr -d '\n')
        local config_id=$(basename "$file" .conf)
        echo "$i) $config_id - Created: $created_date"
        ((i++))
      done
      
      echo "Options:"
      echo "k <number> - Keep only the specified configuration"
      echo "s         - Skip (keep all)"
      echo "n         - Delete all configurations for this SSID and mode"
      read -p "Choice [s]: " choice
      
      if [[ "$choice" =~ ^k[[:space:]]*([0-9]+)$ ]]; then
        local keep_num="${BASH_REMATCH[1]}"
        if [ "$keep_num" -ge 1 ] && [ "$keep_num" -le ${#duplicate_files[@]} ]; then
          for ((j=0; j<${#duplicate_files[@]}; j++)); do
            if [ "$j" -ne "$((keep_num-1))" ]; then
              echo "Deleting: ${duplicate_files[$j]}"
              rm -f "${duplicate_files[$j]}"
            fi
          done
        else
          echo "Invalid number, skipping"
        fi
      elif [[ "$choice" == "n" ]]; then
        echo "Deleting all configurations for $ssid (${mode} mode)"
        for file in "${duplicate_files[@]}"; do
          rm -f "$file"
        done
      else
        echo "Skipping"
      fi
    fi
  done
  
  echo "Duplicate configuration cleanup completed."
}

# Add your other existing functions here...

# MAIN
if [ "$#" -eq 0 ]; then
  interactive_setup
  exit $?
fi

case "${1:-}" in
  --current)
    show_current_setup
    ;;
  --device)
    shift
    handle_devices "$@"
    ;;
  --help)
    print_help
    ;;
  --setup)
    shift
    # Initialize variables to store parsed values
    L_INTERFACE=""
    L_MODE=""
    L_SSID="" 
    L_PASSWORD=""
    L_CAPTIVE_MODE=""
    L_CONFIG_NAME=""
    L_WG_INTERFACE=""

    while [[ $# -gt 0 ]]; do
      case "$1" in
        --interface)
          L_INTERFACE="$2"
          shift 2
          ;;
        --mode)
          L_MODE="$2"
          shift 2
          ;;
        --ssid)
          L_SSID="$2"
          shift 2
          ;;
        --password)
          L_PASSWORD="$2"
          shift 2
          ;;
        --config_name)
          L_CONFIG_NAME="$2"
          shift 2
          ;;
        --wg_interface)
          L_WG_INTERFACE="$2"
          shift 2
          ;;
        --captive_mode)
          L_CAPTIVE_MODE="$2"
          shift 2
          ;;
        *)
          echo "Error: Unknown parameter for --setup: $1" >&2
          print_help
          exit 1
          ;;
      esac
    done

    if [ -z "$L_INTERFACE" ]; then
      echo "Error: --interface is required for --setup." >&2
      print_help
      exit 1
    fi
    if [ -z "$L_MODE" ]; then
      echo "Error: --mode is required for --setup." >&2
      print_help
      exit 1
    fi

    handle_setup "$L_INTERFACE" "$L_MODE" "$L_SSID" "$L_PASSWORD" "$L_CAPTIVE_MODE" "$L_CONFIG_NAME" "$L_WG_INTERFACE"
    ensure_hairpin_nat
    ;;
  --edit)
    shift
    handle_edit "$@"
    ;;
  --list)
    list_configs
    ;;
  --select)
    select_config
    ;;
  --activate)
    shift
    if [ -z "$1" ]; then
      echo "Error: Config ID required for --activate." >&2
      print_help
      exit 1
    fi
    activate_config "$1"
    ;;
  --deduplicate-profiles)
    deduplicate_network_profiles
    ;;
  --deduplicate-saved)
    deduplicate_saved_configs
    ;;
  --debug)
    shift
    if [ "${1:-}" == "deep" ]; then
      run_debug_diagnostics "deep"
    else
      run_debug_diagnostics "normal"
    fi
    ;;
  status)
    show_status
    ;;
  *)
    echo "Error: Unknown command: $1" >&2
    print_help
    exit 1
    ;;
esac
